#!/usr/local/plan9/bin/rc
. ./util.rc
. ./handlers.rc
. ./fltr_cache.rc
cd ..

forbidden_uri_chars='[^a-zA-Z0-9_+\-\/\.,:абвгдеёжзийклмнопрстуфхцчшщъыьэюяАБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦАШЩаЫЬЭЮЯ]'
difs=$ifs # Used to restore default ifs when needed 

# Expected input: ls -F style, $sitedir/path/to/files/
#          <ls -F+x><symlink hack><Useless?><hiden files  >
dirfilter='s/\*$//; s,/+\./+,/,g; s,^\./,,; /\/[._][^\/]/d; /'$forbidden_uri_chars'/d; /\/sitemap\.xml$/d; /\/index\.(md|tpl)$/d; /\/(robots|sitemap)\.txt$/d; /_werc\/?$/d; '
dirclean=' s/\.(md|1)$//; '

# Careful, the proper p9p path might not be set until initrc.local is sourced
path=(. $PLAN9/bin ./bin /bin /usr/bin) 

http_content_type='text/html'
ll_add handlers_bar_left nav_tree
werc_root=`{pwd}
sitesdir=sites

if(test -f etc/initrc.local)
    . ./etc/initrc.local
if not
    . ./etc/initrc

fn werc_exec_request {
    site=$SERVER_NAME
    base_url=http://$site
    sitedir=$sitesdir/$site
	if (! ~ $#default_site 0) {
		sitedir=$sitesdir/default
	}
    master_template=`{get_tpl_file master.tpl}
    current_date_time=`{date}

    # Note: $REQUEST_URI is not officially in CGI 1.1, but seems to be de-facto
    # Note: We only urldecode %5F->'_' because some sites (stackoverflow.com?) urlencode it in their links,
	    # perhaps we should completely urldecode the whole url.
	req_path=`{echo -n $REQUEST_URI | sed '
	    s/%D0%90/А/g;
	    s/%D0%91/Б/g;
	    s/%D0%92/В/g;
	    s/%D0%93/Г/g;
	    s/%D0%94/Д/g;
	    s/%D0%95/Е/g;
	    s/%D0%01/Ё/g;
	    s/%D0%96/Ж/g;
	    s/%D0%97/З/g;
	    s/%D0%98/И/g;
	    s/%D0%99/Й/g;
	    s/%D0%9A/К/g;
	    s/%D0%9B/Л/g;
	    s/%D0%9C/М/g;
	    s/%D0%9D/Н/g;
	    s/%D0%9E/О/g;
	    s/%D0%9F/П/g;
	    s/%D0%A0/Р/g;
	    s/%D0%A1/С/g;
	    s/%D0%A2/Т/g;
	    s/%D0%A3/У/g;
	    s/%D0%A4/Ф/g;
	    s/%D0%A5/Х/g;
	    s/%D0%A6/Ц/g;
	    s/%D0%A7/А/g;
	    s/%D0%A8/Ш/g;
	    s/%D0%A9/Щ/g;
	    s/%D0%AA/а/g;
	    s/%D0%AB/Ы/g;
	    s/%D0%AC/Ь/g;
	    s/%D0%AD/Э/g;
	    s/%D0%AE/Ю/g;
	    s/%D0%AF/Я/g;
	    s/%D0%B0/а/g;
	    s/%D0%B1/б/g;
	    s/%D0%B2/в/g;
	    s/%D0%B3/г/g;
	    s/%D0%B4/д/g;
	    s/%D0%B5/е/g;
	    s/%D1%91/ё/g;
	    s/%D0%B6/ж/g;
	    s/%D0%B7/з/g;
	    s/%D0%B8/и/g;
	    s/%D0%B9/й/g;
	    s/%D0%BA/к/g;
	    s/%D0%BB/л/g;
	    s/%D0%BC/м/g;
	    s/%D0%BD/н/g;
	    s/%D0%BE/о/g;
	    s/%D0%BF/п/g;
	    s/%D1%80/р/g;
	    s/%D1%81/с/g;
	    s/%D1%82/т/g;
	    s/%D1%83/у/g;
	    s/%D1%84/ф/g;
	    s/%D1%85/х/g;
	    s/%D1%86/ц/g;
	    s/%D1%87/ч/g;
	    s/%D1%88/ш/g;
	    s/%D1%89/щ/g;
	    s/%D1%8A/ъ/g;
	    s/%D1%8B/ы/g;
	    s/%D1%8C/ь/g;
	    s/%D1%8D/э/g;
	    s/%D1%8E/ю/g;
	    s/%D1%8F/я/g;
	'}
    req_path=`{echo -n $req_path | sed 's/\?.*//; s!//+!/!g; s/%5[Ff]/_/g; s/'^$forbidden_uri_chars^'//g; s/\.\.*/./g; 1q'}
    req_url=$base_url^$req_path
    local_path=$sitedir$req_path
    local_file=''
    ifs='/' { args=`{echo -n $req_path} }

    if(~ $req_path */index)
        perm_redirect `{echo $req_path | sed 's,/index$,/,'}

    if(~ $local_path */) {
        if(test -d $local_path)
            local_path=$local_path^'index'
        # XXX: This redir might step on apps with synthetic dirs.
        if not if(ls `{basename -d $local_path}^* >/dev/null >[2]/dev/null)
            perm_redirect `{echo $req_path|sed 's,/+$,,'}
    }
    if not if(~ $req_path *'.' *',' *';' *':')
        perm_redirect `{echo $req_path | sed 's/[.,;:)]$//'}
    if not if(test -d $local_path)
        perm_redirect $req_path^'/'

    if(! ~ $#args 0)
        ifs=$NEW_LINE { pageTitle=`{ echo $args|sed -e 's/ / - /g' -e 's/([a-z])-([a-z])/\1 \2/g' -e 's/_/ /g' } }

    cd $sitedir
    req_paths_list='/' # Note: req_paths_list doesn't include 'stnythetic' dirs.
    conf_wd='/' # Used in config files to know where we are in the document tree.
    if(test -f _werc/config)
        . _werc/config
    for(i in $args) {
        conf_wd=$conf_wd^$i
        req_paths_list=($req_paths_list $conf_wd)
        if(test -d $i) {
            conf_wd=$conf_wd'/'
            cd $i
            if(test -f _werc/config)
                . _werc/config
        }
    }
    cd $werc_root

    if(~ $#perm_redir_to 1)
        perm_redirect $perm_redir_to
    for(l in $perm_redir_patterns) {
        p=$$l
        r=$p(1)
        # If target is absolute, then patern must match whole string
        if(~ $p(2) http://* https://*)
            r='^'$r 
        t=`{ echo $req_path | sed 's!'^$r^'!'^$p(2)^'!' } # Malicious danger!

        if(! ~ $"t '' $req_path)
            perm_redirect $t
    }

    setup_handlers

    # Set Page title
    if(! ~ $local_file '') {
        t=`{get_file_title $local_file}
        if(! ~ $"t '')
            pageTitle=$t
    }

    # XXX Is this never true? because we set pageTitle earlier based on url.
    if(~ $"pageTitle '') 
        pageTitle=$"siteTitle' '$"siteSubtitle
    if not
        pageTitle=$"pageTitle' | '$"siteTitle' '$"siteSubtitle

    for(h in $extraHttpHeaders)
        echo $h
    echo 'Content-Type: '^$http_content_type
    echo # End of HTTP headers

    if(~ $REQUEST_METHOD HEAD)
        exit
    
    template $master_template | awk_buffer
}

werc_exec_request
